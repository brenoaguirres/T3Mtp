========================
PACKAGES
========================
> Multiplayer Tools
> Multiplayer Game Mode
> Netcode for Game Objects

========================
GAME VISUAL MANAGER, SPAWN OBJECTS
========================

> better to have one parent GO with all sorts
of logic
> visuals separated in another child GO

> scale and manipulate visuals in visuals GO
> logic has 1,1,1 scale always

> complex event syntax for decoupling
> check out game manager code for more info

> awake for init of myself
> start for init that depend on others

> network object component -> allow object
to be spawnable over the network
> register networkprefab to default network prefabs

> only server can spawn objects at this time
> also the position will not be updated in client
only in server.

========================
RPC
========================

> allow to pass requisitions of procedures
from s -> c, c -> s, etc.

> an RPC function must be within an NetworkBehaviour object
> the function must be marked with the attribute Rpc e.g. [Rpc(SendTo.Server)]
> the function must end with Rpc on the name e.g. ShowLogRpc();
> script must be on a networkobject

========================
NETWORK TRANSFORM
========================

> Stuff that should sync movement need to have a network transform component
> Sync as little data as possible to save on bandwidth. Servers are usually priced per bandwidth usage.
 
========================
PLAYERTYPES, LOCAL CLIENT ID
========================

> do not use strings to define types, enums instead
> NetworkBehaviour have a bunch of callbacks: OnNetworkSpawn()

> generally you can only pass value types to RPCS, to pass ref you need to network serialize the type.
> you cannot also pass a NetworkObject but you do can pass a NetworkObjectReference type.



